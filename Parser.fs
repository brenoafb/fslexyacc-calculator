// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open Syntax

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | OP_PLUS
  | OP_MINUS
  | OP_TIMES
  | OP_DIVIDE
  | LPAREN
  | RPAREN
  | EOF
  | INT of (int)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_OP_PLUS
    | TOKEN_OP_MINUS
    | TOKEN_OP_TIMES
    | TOKEN_OP_DIVIDE
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_EOF
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Expr

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | OP_PLUS  -> 0 
  | OP_MINUS  -> 1 
  | OP_TIMES  -> 2 
  | OP_DIVIDE  -> 3 
  | LPAREN  -> 4 
  | RPAREN  -> 5 
  | EOF  -> 6 
  | INT _ -> 7 
  | ID _ -> 8 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_OP_PLUS 
  | 1 -> TOKEN_OP_MINUS 
  | 2 -> TOKEN_OP_TIMES 
  | 3 -> TOKEN_OP_DIVIDE 
  | 4 -> TOKEN_LPAREN 
  | 5 -> TOKEN_RPAREN 
  | 6 -> TOKEN_EOF 
  | 7 -> TOKEN_INT 
  | 8 -> TOKEN_ID 
  | 11 -> TOKEN_end_of_input
  | 9 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Expr 
    | 3 -> NONTERM_Expr 
    | 4 -> NONTERM_Expr 
    | 5 -> NONTERM_Expr 
    | 6 -> NONTERM_Expr 
    | 7 -> NONTERM_Expr 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 11 
let _fsyacc_tagOfErrorTerminal = 9

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | OP_PLUS  -> "OP_PLUS" 
  | OP_MINUS  -> "OP_MINUS" 
  | OP_TIMES  -> "OP_TIMES" 
  | OP_DIVIDE  -> "OP_DIVIDE" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | EOF  -> "EOF" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | OP_PLUS  -> (null : System.Object) 
  | OP_MINUS  -> (null : System.Object) 
  | OP_TIMES  -> (null : System.Object) 
  | OP_DIVIDE  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 5us; 65535us; 0us; 2us; 9us; 5us; 10us; 6us; 11us; 7us; 12us; 8us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 5us; 1us; 4us; 5us; 6us; 7us; 1us; 2us; 1us; 3us; 5us; 4us; 4us; 5us; 6us; 7us; 5us; 4us; 5us; 5us; 6us; 7us; 5us; 4us; 5us; 6us; 6us; 7us; 5us; 4us; 5us; 6us; 7us; 7us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 10us; 12us; 14us; 20us; 26us; 32us; 38us; 40us; 42us; 44us; |]
let _fsyacc_action_rows = 13
let _fsyacc_actionTableElements = [|2us; 32768us; 7us; 4us; 8us; 3us; 0us; 49152us; 4us; 16385us; 0us; 9us; 1us; 10us; 2us; 11us; 3us; 12us; 0us; 16386us; 0us; 16387us; 2us; 16388us; 2us; 11us; 3us; 12us; 2us; 16389us; 2us; 11us; 3us; 12us; 0us; 16390us; 0us; 16391us; 2us; 32768us; 7us; 4us; 8us; 3us; 2us; 32768us; 7us; 4us; 8us; 3us; 2us; 32768us; 7us; 4us; 8us; 3us; 2us; 32768us; 7us; 4us; 8us; 3us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 9us; 10us; 11us; 14us; 17us; 18us; 19us; 22us; 25us; 28us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16386us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 122 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  Syntax.Expr  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 131 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "Parser.fsy"
                                   _1 
                   )
# 20 "Parser.fsy"
                 :  Syntax.Expr ));
# 142 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "Parser.fsy"
                                 Var(_1) 
                   )
# 22 "Parser.fsy"
                 : 'gentype_Expr));
# 153 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "Parser.fsy"
                                 Int(_1) 
                   )
# 23 "Parser.fsy"
                 : 'gentype_Expr));
# 164 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "Parser.fsy"
                                                 Add(_1,_3) 
                   )
# 24 "Parser.fsy"
                 : 'gentype_Expr));
# 176 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "Parser.fsy"
                                                 Sub(_1,_3) 
                   )
# 25 "Parser.fsy"
                 : 'gentype_Expr));
# 188 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "Parser.fsy"
                                                 Mul(_1,_3) 
                   )
# 26 "Parser.fsy"
                 : 'gentype_Expr));
# 200 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "Parser.fsy"
                                                 Div(_1,_3) 
                   )
# 27 "Parser.fsy"
                 : 'gentype_Expr));
|]
# 213 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 12;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  Syntax.Expr  =
    engine lexer lexbuf 0 :?> _
